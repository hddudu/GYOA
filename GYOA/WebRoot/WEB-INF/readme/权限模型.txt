1：用户
【】
||
||
||
2：权限
【】
{添加用户
{删除用户
{查看用户

3:多对多的关系

游客
管理员
普通用户

4：用户： 多对多 ： 角色 ： 多对多 ： 权限

用户的权限： 用户的所有角色的权限的集合

一个功能能否被使用，是判断用户权限中是否有这个功能的许可

5： web工程 ： B/S结构 ：
权限理解： 
=====》针对所有web工程
①权限就是控制功能的使用，（功能对应着请求URL）
②对功能的控制就是对访问URL的控制
=====>针对我们当前的工程
③在我们的程序中，一个功能对应一个或两个URL，
	①例如列表或删除功能，只对应一个URL
	②例如添加或修改功能，对应两个URL
		URL ： add....addUI
		
增	url_add		url_addUI		====》两个请求===>去掉带UI的后缀就是一个功能对应一个url
删	url_delete				====》一个请求
改	url_edit				====》两个请求
查	url_list	url_editUI		====》一个请求

二： 权限是做什么事情的？

三： 权限的模型

①重点说明
②公共的
③B/S
④我们的程序

四：权限中具体的功能是什么？

①初始化数据：非常重要！
	就是功能的初始化数据，功能对应着权限
	权限数据====》基本的配置数据、基本的数据库的初始化的数据;
	特殊：超级管理员====》本身有所有的权限，别人对它无法操作！！
②分配权限：
	给角色分配权限；	
	用户的权限就是用户的角色所拥有的权限;
	
③使用权限：
	①登陆、注销 ： 涉及权限控制
	②左边菜单栏 ： 涉及权限控制
		菜单是根据权限显示的
	③右侧页面中的链接也是根据权限显示的
		例如：精华链接
		不能允许地址栏输入的效果
	④拦截每一个action请求，验证用户是否有权限访问

④充分了解需求==》设计实体==》编写代码==》
权限是依赖性的，低级权限是依赖上级权限的！！！！！！！！！！！！！！
	
	
=====
论坛中：
未登陆，只能查看

文章管理：

==============
计划：
①树状结构
②权限模型设计
③
	
	
=================================================================

		<!-- 第一个自关联关系：同部门 -->
		<!-- parent属性： 本类与本类 department的自关联关系：多对一（） :出现了懒加载的问题-->
<!-- 		<class name="com.test.Student"table="student" lazy="true">  
这种方式等价于  
<class name="com.test.Student"table="student" proxy="com.test.Student">   -->
		<many-to-one name="parent" class="Privilege" column="parentId" lazy="false"></many-to-one>
<!-- 		<many-to-one name="parent" class="Department" column="parentId" lazy="false"></many-to-one> -->
		<!--child属性就是departments属性： 本类与本类department的另一个自关联关系：一对多（） -->
		<set name="childrens" cascade="delete" lazy="false" order-by="id">
			<key>
				<column name="parentId"></column>
			</key>
			<one-to-many class="Department"/>
		</set>
		<!-- users属性 本类与user：一对多关系 -->
		<set name="users">
			<key>
				<column name="departmentId"></column>
			</key>
			<one-to-many class="User"/>
		</set>
			

		
		







